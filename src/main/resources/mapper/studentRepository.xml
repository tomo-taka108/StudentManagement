<?xml version="1.0" encoding="UTF-8"?> <!-- XMLの宣言。UTF-8で文字コードを指定 -->

<!-- MyBatisのMapper定義を読み込む -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="raisetech.student.management.repository.StudentRepository">
  <!-- namespace は Mapperインターフェースのパッケージ+クラス名と一致させる -->

  <!-- ============================ -->
  <!-- 受講生（Student）検索 -->
  <!-- ============================ -->

  <!-- 全件検索 -->
  <select id="search" resultType="raisetech.student.management.data.Student">
    <!-- id は Mapperインターフェース内のメソッド名に一致 -->
    <!-- resultType は戻り値の型（クラスのフルパス） -->
    SELECT * FROM students
  </select>

  <!-- ID指定検索 -->
  <select id="searchStudent" resultType="raisetech.student.management.data.Student">
    SELECT * FROM students WHERE id = #{id}
  </select>

  <!-- ============================ -->
  <!-- StudentCourse（受講生コース情報）検索 -->
  <!-- ============================ -->

  <!-- 全件検索 -->
  <select id="searchStudentCourseList" resultType="raisetech.student.management.data.StudentCourse">
    SELECT * FROM student_courses
  </select>

  <!-- 受講生ID指定検索 -->
  <select id="searchStudentCourse" resultType="raisetech.student.management.data.StudentCourse">
    SELECT * FROM student_courses WHERE student_id = #{studentId}
  </select>

  <!-- ============================ -->
  <!-- CourseStatus（コース申込状況）検索 -->
  <!-- ============================ -->

  <!-- 全件検索 -->
  <select id="searchCourseStatusList" resultType="raisetech.student.management.data.CourseStatus">
    SELECT * FROM course_status
  </select>

  <!-- 受講生ID指定検索 -->
  <select id="searchCourseStatus" resultType="raisetech.student.management.data.CourseStatus">
    SELECT * FROM course_status WHERE student_id = #{studentId}
  </select>

  <!-- ============================ -->
  <!-- 条件指定検索 -->
  <!-- ============================ -->

  <select id="searchWithCriteria"
    resultType="raisetech.student.management.data.Student"
    parameterType="raisetech.student.management.data.StudentSearchCriteria">
    SELECT DISTINCT s.* FROM students s
    <!-- コース情報および申込状況での検索が必要な場合はJOIN -->
    <if test="courseName != null or status != null">
      LEFT JOIN student_courses sc ON s.id = sc.student_id
      LEFT JOIN course_status cs ON s.id = cs.student_id AND sc.course_id = cs.course_id
    </if>
    <where>
      <!-- 各条件が指定されている場合のみ WHERE句に追加 -->
      <if test="id != null and id != ''">
        AND s.id = #{id}
      </if>
      <if test="name != null and name != ''">
        AND s.name LIKE CONCAT('%', #{name}, '%')
      </if>
      <if test="kanaName != null and kanaName != ''">
        AND s.kana_name LIKE CONCAT('%', #{kanaName}, '%')
      </if>
      <if test="nickname != null and nickname != ''">
        AND s.nickname LIKE CONCAT('%', #{nickname}, '%')
      </if>
      <if test="area != null and area != ''">
        AND s.area = #{area}
      </if>
      <if test="ageMin != null">
        AND s.age &gt;= #{ageMin}
      </if>
      <if test="ageMax != null">
        AND s.age &lt;= #{ageMax}
      </if>
      <if test="sex != null and sex != ''">
        AND s.sex = #{sex}
      </if>
      <if test="courseName != null and courseName != ''">
        AND sc.course_name LIKE CONCAT('%', #{courseName}, '%')
      </if>
      <if test="status != null and status != ''">
        AND cs.status = #{status}
      </if>
      <if test="isDeleted != null">
        AND s.isDeleted = #{isDeleted}
      </if>
    </where>
    ORDER BY s.id
  </select>


  <!-- ============================ -->
  <!-- 新規登録 -->
  <!-- ============================ -->

  <!-- 受講生を新規登録 -->
  <insert id="registerStudent" parameterType="raisetech.student.management.data.Student"
    useGeneratedKeys="true" keyProperty="id">
    INSERT INTO students(name,kana_name,nickname,email,area,age,sex,remark,isDeleted)
    VALUES(#{name},#{kanaName},#{nickname},#{email},#{area},#{age},#{sex},#{remark},false)
  </insert>

  <!-- 受講生コース情報を新規登録 -->
  <insert id="registerStudentCourse" parameterType="raisetech.student.management.data.StudentCourse"
    useGeneratedKeys="true" keyProperty="id">
    INSERT INTO student_courses(student_id,course_id,course_name,start_date,end_date)
    VALUES(#{studentId},#{courseId},#{courseName},#{startDate},#{endDate})
  </insert>

  <!-- コース申込状況を新規登録 -->
  <insert id="registerCourseStatus" parameterType="raisetech.student.management.data.CourseStatus"
    useGeneratedKeys="true" keyProperty="id">
    INSERT INTO course_status(student_id,course_id,status)
    VALUES(#{studentId},#{courseId},#{status})
  </insert>


  <!-- ============================ -->
  <!-- 更新 -->
  <!-- ============================ -->

  <!-- 受講生を更新 -->
  <update id="updateStudent" parameterType="raisetech.student.management.data.Student">
    UPDATE students
    SET name = #{name}, kana_name = #{kanaName}, nickname = #{nickname}, email = #{email}, area =
    #{area}, age = #{age}, sex = #{sex}, remark = #{remark}, isDeleted = #{isDeleted}
    WHERE id = #{id}
  </update>

  <!-- 受講生コース情報のコース名を更新 -->
  <update id="updateStudentCourse" parameterType="raisetech.student.management.data.StudentCourse">
    UPDATE student_courses
    SET course_id = #{courseId}, course_name = #{courseName}
    WHERE id = #{id}
  </update>

  <!-- コース申込状況を更新 -->
  <update id="updateCourseStatus" parameterType="raisetech.student.management.data.CourseStatus">
    UPDATE course_status
    SET status = #{status}
    WHERE id = #{id}
  </update>


</mapper>